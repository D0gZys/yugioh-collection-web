/1═══════════════════════════════════════════════════════════════════════════════════
                            📖 GUIDE GIT - COMMANDES ESSENTIELLES
═══════════════════════════════════════════════════════════════════════════════════

🔧 CONFIGURATION INITIALE
═════════════════════════════════════════════════════════════════════════════════════
git config --global user.name "Ton Nom"
git config --global user.email "ton-email@example.com"
git config --list                                    # Voir la configuration actuelle

🚀 CRÉER/CLONER UN PROJET
═════════════════════════════════════════════════════════════════════════════════════
git init                                             # Initialiser un nouveau dépôt
git clone https://github.com/username/repo.git       # Cloner un dépôt existant
git clone https://github.com/username/repo.git nom   # Cloner avec un nom de dossier spécifique

📋 VÉRIFIER L'ÉTAT
═════════════════════════════════════════════════════════════════════════════════════
git status                                           # Voir l'état des fichiers
git log                                               # Historique des commits
git log --oneline                                     # Historique condensé
git log --graph --oneline --all                      # Historique graphique
git diff                                              # Voir les modifications non ajoutées
git diff --staged                                     # Voir les modifications ajoutées (staged)

💾 AJOUTER ET COMMITTER
═════════════════════════════════════════════════════════════════════════════════════
git add fichier.txt                                  # Ajouter un fichier spécifique
git add .                                             # Ajouter tous les fichiers modifiés
git add *.js                                          # Ajouter tous les fichiers .js
git commit -m "Message du commit"                     # Créer un commit
git commit -am "Message"                              # Ajouter + committer (fichiers déjà trackés)
git commit --amend -m "Nouveau message"               # Modifier le dernier commit

🌐 SYNCHRONISATION AVEC GITHUB
═════════════════════════════════════════════════════════════════════════════════════
git remote add origin https://github.com/user/repo.git  # Ajouter un dépôt distant
git remote -v                                           # Voir les dépôts distants
git push                                                 # Envoyer vers GitHub
git push -u origin main                                  # Premier push (définit la branche par défaut)
git pull                                                 # Récupérer depuis GitHub
git fetch                                                # Récupérer sans fusionner

🌿 GESTION DES BRANCHES
═════════════════════════════════════════════════════════════════════════════════════
git branch                                           # Lister les branches locales
git branch -a                                         # Lister toutes les branches (locales + distantes)
git branch nom-branche                                # Créer une nouvelle branche
git checkout nom-branche                              # Changer de branche
git checkout -b nouvelle-branche                      # Créer et changer de branche
git switch nom-branche                                # Changer de branche (moderne)
git switch -c nouvelle-branche                        # Créer et changer de branche (moderne)
git merge nom-branche                                 # Fusionner une branche
git branch -d nom-branche                             # Supprimer une branche (locale)
git push origin --delete nom-branche                  # Supprimer une branche (distante)

🔄 ANNULER/CORRIGER
═════════════════════════════════════════════════════════════════════════════════════
git restore fichier.txt                              # Annuler les modifications d'un fichier
git restore --staged fichier.txt                     # Retirer un fichier du staging
git reset HEAD~1                                      # Annuler le dernier commit (garde les modifications)
git reset --hard HEAD~1                              # Annuler le dernier commit (PERD les modifications)
git revert commit-hash                                # Créer un commit qui annule un commit précédent

📁 GESTION DES FICHIERS
═════════════════════════════════════════════════════════════════════════════════════
git rm fichier.txt                                   # Supprimer un fichier (et le retirer de Git)
git rm --cached fichier.txt                          # Retirer un fichier de Git (le garder localement)
git mv ancien-nom.txt nouveau-nom.txt                # Renommer/déplacer un fichier

🏷️ TAGS (VERSIONS)
═════════════════════════════════════════════════════════════════════════════════════
git tag                                              # Lister les tags
git tag v1.0.0                                       # Créer un tag
git tag -a v1.0.0 -m "Version 1.0.0"                # Créer un tag avec message
git push origin v1.0.0                               # Envoyer un tag vers GitHub
git push --tags                                       # Envoyer tous les tags

🔍 RECHERCHE ET INSPECTION
═════════════════════════════════════════════════════════════════════════════════════
git show commit-hash                                  # Voir les détails d'un commit
git blame fichier.txt                                # Voir qui a modifié chaque ligne
git grep "texte à chercher"                          # Chercher du texte dans les fichiers
git log --grep="mot-clé"                             # Chercher dans les messages de commit

🚨 SITUATIONS D'URGENCE
═════════════════════════════════════════════════════════════════════════════════════
git stash                                            # Sauvegarder temporairement les modifications
git stash pop                                        # Récupérer les modifications sauvegardées
git stash list                                       # Voir les stash sauvegardés
git clean -fd                                        # Supprimer tous les fichiers non trackés
git reflog                                           # Historique de toutes les actions Git (récupération)

🏠 COMMANDES SPÉCIFIQUES AU PROJET YUGIOH-COLLECTION-WEB
═════════════════════════════════════════════════════════════════════════════════════
# Workflow typique de développement :
git status                                           # Vérifier les modifications
git add .                                            # Ajouter tous les changements
git commit -m "✨ Ajout nouvelle fonctionnalité"     # Committer avec emoji
git push                                             # Envoyer vers GitHub

# Types de commits recommandés :
git commit -m "🚀 Initial commit"                    # Premier commit
git commit -m "✨ Ajout nouvelle fonctionnalité"     # Nouvelle feature
git commit -m "🐛 Correction bug affichage cartes"   # Bug fix
git commit -m "💄 Amélioration design interface"     # UI/UX
git commit -m "🔧 Configuration base de données"     # Configuration
git commit -m "📝 Mise à jour documentation"         # Documentation
git commit -m "🎨 Refactoring code Prisma"          # Refactoring

💡 BONNES PRATIQUES
═════════════════════════════════════════════════════════════════════════════════════
1. Toujours faire "git status" avant de committer
2. Écrire des messages de commit clairs et descriptifs
3. Committer souvent, pousser régulièrement
4. Utiliser des branches pour les nouvelles fonctionnalités
5. Tester avant de pousser sur main
6. Ne jamais committer le fichier .env (déjà dans .gitignore)

🆘 EN CAS DE PROBLÈME
═════════════════════════════════════════════════════════════════════════════════════
git status                                           # Toujours commencer par ça
git log --oneline -5                                 # Voir les 5 derniers commits
git reflog                                           # Si tu as perdu des commits
git stash                                            # Si tu veux annuler temporairement
n
🌐 LIENS UTILES
═════════════════════════════════════════════════════════════════════════════════════
- GitHub Desktop : https://desktop.github.com/ (interface graphique)
- Git Cheat Sheet : https://education.github.com/git-cheat-sheet-education.pdf
- Documentation officielle : https://git-scm.com/docs

═══════════════════════════════════════════════════════════════════════════════════
                        Créé pour le projet Yu-Gi-Oh Collection Web
                              https://github.com/D0gZys/yugioh-collection-web
═══════════════════════════════════════════════════════════════════════════════════